<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html -->
<leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="tom.20240921075238.1"><vh>@settings</vh>
<v t="tom.20240921075317.1"><vh>Implementation 2 (production)</vh>
<v t="tom.20240930232554.1"><vh>Layout Commands</vh>
<v t="tom.20240930232554.3"><vh>@command layout-swap-nav-panel</vh></v>
<v t="tom.20240930232554.4"><vh>@command layout-vr3-toggle-in-main-split</vh></v>
<v t="tom.20240930232554.5"><vh>@command layout-make-tabbed-body-pane</vh></v>
<v t="tom.20240930232554.6"><vh>@command layout-vr3-to-tabbed-body</vh></v>
<v t="tom.20240930232554.7"><vh>@command layout-vr-to-tabbed-body</vh></v>
<v t="tom.20240930232554.8"><vh>@command layout-toggle-vr-in-split-main</vh></v>
<v t="tom.20240930232554.9"><vh>@command layout-toggle-vr3-in-log</vh></v>
<v t="tom.20240930232554.10"><vh>@command layout-open-rpcalc-in-tabbed-body</vh></v>
</v>
<v t="tom.20240921080119.1"><vh>Menus</vh>
<v t="tom.20240921080140.1"><vh>@menuat help before</vh>
<v t="tom.20240930232952.1"><vh>@menu Layout &amp;Demo</vh>
<v t="tom.20240930232952.2"><vh>@item layout-restore-default</vh></v>
<v t="tom.20240930232952.3"><vh>@item layout-fallback-layout</vh></v>
<v t="tom.20240930232952.4"><vh>@item layout-legacy</vh></v>
<v t="tom.20240930232952.5"><vh>@item vr3-toggle</vh></v>
<v t="tom.20240930232952.6"><vh>@item vr-toggle</vh></v>
<v t="tom.20240930232952.7"><vh>@menu Built-in Layouts</vh>
<v t="tom.20240930232952.8"><vh>@item layout-vertical-thirds</vh></v>
<v t="tom.20240930232952.9"><vh>@item layout-vertical-thirds2</vh></v>
<v t="tom.20240930232952.10"><vh>@item layout-big-tree</vh></v>
<v t="tom.20240930232952.11"><vh>@item layout-horizontal-thirds</vh></v>
<v t="tom.20240930232952.12"><vh>@item layout-render-focused</vh></v>
</v>
<v t="tom.20240930232952.13"><vh>@item -</vh></v>
<v t="tom.20240930232952.14"><vh>@item layout-swap-nav-panel</vh></v>
<v t="tom.20240930232952.15"><vh>@item layout-make-tabbed-body-pane</vh></v>
<v t="tom.20240930232952.16"><vh>@menu &amp;VR3 Layouts</vh>
<v t="tom.20240930232952.17"><vh>@item layout-vr3-to-tabbed-body</vh></v>
<v t="tom.20240930232952.18"><vh>@item layout-vr3-toggle-in-main-split</vh></v>
<v t="tom.20240930232952.19"><vh>@item layout-toggle-vr3-in-log</vh></v>
</v>
<v t="tom.20240930232952.20"><vh>@menu VR Layouts</vh>
<v t="tom.20240930232952.21"><vh>@item layout-vr-to-tabbed-body</vh></v>
<v t="tom.20240930232952.22"><vh>@item layout-toggle-vr-in-split-main</vh></v>
</v>
<v t="tom.20240930232952.23"><vh>@menu Other Layouts</vh>
<v t="tom.20240930232952.24"><vh>@item layout-quadrant</vh></v>
</v>
<v t="tom.20240930232952.25"><vh>@item -</vh></v>
<v t="tom.20240930232952.26"><vh>@item layout-open-rpcalc-in-tabbed-body</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="tom.20240902123154.2"><vh>@@settings (Implementation 1)</vh>
<v t="tom.20240906104235.1"><vh>Layout Commands</vh>
<v t="tom.20240906104235.2"><vh>@@command layout-initialize</vh></v>
<v t="tom.20240906104235.3"><vh>@@command layout-restore-default</vh>
<v t="tom.20240906104235.4"><vh>&lt;&lt; initialize data structures &gt;&gt;</vh></v>
<v t="tom.20240906104235.5"><vh>&lt;&lt; rehome body editor &gt;&gt;</vh></v>
<v t="tom.20240906104235.6"><vh>&lt;&lt; clean up splitters &gt;&gt;</vh></v>
<v t="tom.20240906104235.7"><vh>&lt;&lt; set default orientations &gt;&gt;</vh></v>
<v t="tom.20240906104235.8"><vh>&lt;&lt; resize splitters &gt;&gt;</vh></v>
</v>
<v t="tom.20240906104235.9"><vh>@@command layout-big-tree</vh></v>
<v t="tom.20240906104235.10"><vh>@@command layout-swap-nav-panel</vh></v>
<v t="tom.20240906104235.11"><vh>@@command layout-vr3-toggle-in-main-split</vh></v>
<v t="tom.20240906104235.12"><vh>@@command layout-make-tabbed-body-pane</vh></v>
<v t="tom.20240906104235.13"><vh>@@command layout-vr3-to-tabbed-body</vh></v>
<v t="tom.20240906104235.14"><vh>@@command layout-vr-to-tabbed-body</vh></v>
<v t="tom.20240906104235.15"><vh>@@command layout-toggle-vr-in-split-main</vh></v>
<v t="tom.20240906104235.16"><vh>@@command layout-toggle-vr3-in-log</vh></v>
<v t="tom.20240906112923.1"><vh>@@command layout-quadrant</vh></v>
<v t="tom.20240906104235.18"><vh>@@command layout-open-rpcalc-in-tabbed-body</vh></v>
</v>
<v t="tom.20240902123350.1"><vh>Menus</vh>
<v t="tom.20240902123422.1"><vh>@@menuat help before</vh>
<v t="tom.20240906103427.1"><vh>@@menu Layout &amp;Demo</vh>
<v t="tom.20240906103427.2"><vh>@@item layout-restore-default</vh></v>
<v t="tom.20240906103427.3"><vh>@@item layout-make-tabbed-body-pane</vh></v>
<v t="tom.20240906103427.4"><vh>@@item -</vh></v>
<v t="tom.20240906103427.5"><vh>@@item layout-swap-nav-panel</vh></v>
<v t="tom.20240906103427.6"><vh>@@item -</vh></v>
<v t="tom.20240906103427.7"><vh>@@item layout-vr3-to-tabbed-body</vh></v>
<v t="tom.20240906103427.8"><vh>@@item layout-vr3-toggle-in-main-split</vh></v>
<v t="tom.20240906103427.9"><vh>@@item layout-toggle-vr3-in-log</vh></v>
<v t="tom.20240906103427.10"><vh>@@item -</vh></v>
<v t="tom.20240906103427.11"><vh>@@item layout-vr-to-tabbed-body</vh></v>
<v t="tom.20240906103427.12"><vh>@@item layout-toggle-vr-in-split-main</vh></v>
<v t="tom.20240906103427.13"><vh>@@item -</vh></v>
<v t="tom.20240906103427.14"><vh>@@item layout-open-rpcalc-in-tabbed-body</vh></v>
<v t="tom.20240906103427.15"><vh>@@item -</vh></v>
<v t="tom.20240906103427.16"><vh>@@item layout-big-tree</vh></v>
<v t="tom.20240906103427.17"><vh>@@item layout-quadrant</vh></v>
</v>
</v>
</v>
</v>
<v t="tom.20240921193617.1"><vh>Tests</vh>
<v t="tom.20240921214717.1"><vh>Check all locations</vh></v>
<v t="tom.20240921221303.1"><vh>Check whether QSplitter(self) == splitter.setParent(self)</vh></v>
<v t="tom.20240922132354.1"><vh>Finding VR3</vh></v>
<v t="tom.20240923163215.1"><vh>list cache children</vh></v>
<v t="tom.20240922152056.1"><vh>Count Splitter and cache children</vh></v>
</v>
<v t="tom.20240922221254.1"><vh>Experimental layout commands</vh></v>
<v t="tom.20240902135000.1"><vh>About This Outline</vh></v>
<v t="tom.20240922222420.1"><vh>@clean mmap.html</vh></v>
</vnodes>
<tnodes>
<t tx="tom.20240902123154.2"></t>
<t tx="tom.20240902123350.1"></t>
<t tx="tom.20240902123422.1"></t>
<t tx="tom.20240902135000.1">This outline contains the prototype of a script-based layout system to arrange Leo's various panes. he system was proposed in https://groups.google.com/g/leo-editor/c/EYQ4odwLLxY

Commands
---------
The key commands that make the system possible are:

    1. layout-initialize
    2. layout-restore-default-layout

The "layout-initialize" script is not usually run on its own. It is called by other scripts.  It creates a cache widget for temporarily holding unused widgets and established certain data structures used by "layout-restore-default-layout".

"layout-restore-default-layout" undoes any layout changes that may have been made by some other script.

All the commands can be executed by pressing CTRL-B while their body is selected.  They are also minibuffer commands.

Menus
------
This outline will add its own menu to the menu bar. This menu is named "Layout Scripts".  You can use it to try out the various commands.  The menu definitions are contained in the @@settings node of the outline.  You can use them as a model for your own custom menu.

Implementation 1
-----------------
The proof-of-priciple prototype

Implementation 2
-----------------
Production
</t>
<t tx="tom.20240906103427.1"></t>
<t tx="tom.20240906103427.10"></t>
<t tx="tom.20240906103427.11">VR - &amp;Open In Tabbed Body</t>
<t tx="tom.20240906103427.12">VR -Toggle In Split &amp;Main Panel</t>
<t tx="tom.20240906103427.13"></t>
<t tx="tom.20240906103427.14">RPCalc - Open In Tabbed Body</t>
<t tx="tom.20240906103427.15"></t>
<t tx="tom.20240906103427.16">&amp;Big Tree Layout
</t>
<t tx="tom.20240906103427.17">&amp;Quadrant Layout</t>
<t tx="tom.20240906103427.2">&amp;Restore Default Layout
</t>
<t tx="tom.20240906103427.3">Make &amp;Body Tabbed</t>
<t tx="tom.20240906103427.4"></t>
<t tx="tom.20240906103427.5">&amp;Swap Nav Frame Location
</t>
<t tx="tom.20240906103427.6"></t>
<t tx="tom.20240906103427.7">&amp;VR3 - Open In Tabbed Body</t>
<t tx="tom.20240906103427.8">VR3 -Toggle In Split &amp;Main Panel</t>
<t tx="tom.20240906103427.9">VR3 - Toggle In &amp;Log Frame</t>
<t tx="tom.20240906104235.1"></t>
<t tx="tom.20240906104235.10">@@language python
"""Move Nav frame between main and secondary splitters."""

gui = g.app.gui

ms = gui.find_widget_by_name(c, 'main_splitter')
ss = gui.find_widget_by_name(c, 'secondary_splitter')
lf = gui.find_widget_by_name(c, 'logFrame')

nav_in_secondary = ss.indexOf(lf)
target = ms if nav_in_secondary &gt; -1 else ss
target.addWidget(lf)
target.setSizes([100_000] * len(target.sizes()))

</t>
<t tx="tom.20240906104235.11">@@language python
"""Toggle VR3 in main splitter without destroying the instance."""
from leo.core.leoQt import QtCore

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

def show_pane(w):
    w.setUpdatesEnabled(True)
    w.show()

c.doCommandByName('layout-initialize')
cache = find_widget('leo-layout-cache')

vr3 = find_widget('viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3()

ms = find_widget('main_splitter')

if vr3.parent() == ms:
    vr3.setParent(cache)
else:
    vr3.setParent(ms)
    # g.app.gui.equalize_splitter(ms)
    ms.setSizes([100_000] * len(ms.sizes()))
    # Avoid flash each time VR3 pane is re-opened.
    QtCore.QTimer.singleShot(60, lambda: show_pane(vr3))
</t>
<t tx="tom.20240906104235.12">@@language python
from leo.core.leoQt import QtWidgets

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

# Find splitters, etc.
ms = find_widget('main_splitter')
bp2 = find_widget('bodyPage2')
sw = find_widget('bodyStackedWidget')

# Find or make singleton bodyTabWidget
tw = find_widget('bodyTabWidget')
if not tw:
    tw = QtWidgets.QTabWidget(None)
    tw.setObjectName('bodyTabWidget')

tw.insertTab(0, bp2, 'Body Editor')
tw.setCurrentIndex(0)
tw.setMovable(True)
sw.insertWidget(0, tw)
sw.setCurrentIndex(0)
</t>
<t tx="tom.20240906104235.13">@@language python
"""Add widget to tabbed body.

Only works if the body is already tabbed.
Otherwise VR3 will open in a new tab in the
Log frame.
"""

CACHENAME = 'leo-layout-cache'

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

vr3 = find_widget('viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3()

tw = find_widget('bodyTabWidget')
if tw and tw.parent().objectName() != CACHENAME:
        index = tw.addTab(vr3, 'VR3')
        tw.setCurrentIndex(index)
else:
    c.doCommandByName('vr3-tab')

</t>
<t tx="tom.20240906104235.14">@@language python
"""Add widget to body frame tabbed widget.

Only works if the bodyStackedWidget has been changed to or
contains a QTabWidget. Otherwise VR will open in its default position.
"""

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

CACHENAME = 'leo-layout-cache'

# Find or create VR widget
vr = find_widget('viewrendered_pane')
if not vr:
    import leo.plugins.viewrendered as v
    # Alternate versions for earlier revisions of VR
    try:
        vr = v.getVr()
    except:
        h = c.hash()
        vr.controllers[h] = vr = v.ViewRenderedController(c)

tw = find_widget('bodyTabWidget')
if tw and tw.parent().objectName() != CACHENAME:
    if tw.indexOf(vr) == -1:
        index = tw.addTab(vr, 'VR')
        tw.setCurrentIndex(index)
    c.doCommandByName('vr-show')
else:
    c.doCommandByName('vr-show')
</t>
<t tx="tom.20240906104235.15">@@language python
"""Toggle VR in main splitter without destroying the instance."""
from leo.core.leoQt import QtCore

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

def show_pane(w):
    w.setUpdatesEnabled(True)
    c.doCommandByName('vr-show')

c.doCommandByName('layout-initialize')
cache = find_widget('leo-layout-cache')

# Find or create VR widget
vr = find_widget('viewrendered_pane')
if not vr:
    import leo.plugins.viewrendered as v
    # Alternate versions for earlier revisions of VR
    try:
        vr = v.getVr()
    except:
        h = c.hash()
        vr.controllers[h] = vr = v.ViewRenderedController(c)

ms = find_widget('main_splitter')

if vr.parent() == ms:
    vr.setParent(cache)
else:
    vr.setParent(ms)
    # g.app.gui.equalize_splitter(ms)
    ms.setSizes([100_000] * len(ms.sizes()))
    # Avoid flash each time VR pane is re-opened.
    QtCore.QTimer.singleShot(60, lambda: show_pane(vr))
</t>
<t tx="tom.20240906104235.16">TABNAME = 'VR3'
CACHENAME = 'leo-layout-cache'

c.doCommandByName('layout-initialize')

log = c.frame.log

vr3 = g.app.gui.find_widget_by_name(c, 'viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3()

# if a VR3 tab exists, remove the vr3 widget
index = log.findTabIndex(TABNAME)
if index is not None:
    cache = g.app.gui.find_widget_by_name(c, CACHENAME)
    vr3.setParent(cache)
else:
    log.createTab(TABNAME, widget = vr3, createText = False)
    log.selectTab(TABNAME)

</t>
<t tx="tom.20240906104235.18">@@language python
"""Add RPCalc widget to tabbed body

Only works if the body is already tabbed.
Otherwise RPCalc will open in a new tab in the
Log frame.
"""

from leo.core.leoQt import Qt
from leo.plugins import rpcalc

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

tw = find_widget('bodyTabWidget')
if tw:
    rcalc = find_widget('rpcalc')
    if not rcalc:
        rcalc = rpcalc.CalcDlg()
        rcalc.setObjectName('rpcalc')

    if tw.indexOf(rcalc) == -1:
        index = tw.addTab(rcalc, 'RPCalc')
        tw.setCurrentIndex(index)
        # Avoid keypress on both key-up and key-down
        rcalc.standalone = True
        rcalc.setFocus(Qt.FocusReason.OtherFocusReason)
else:
    c.doCommandByName('rpcalc-toggle')
</t>
<t tx="tom.20240906104235.2">@@language python
"""Initialize layout widget cache and dicts."""
from collections import OrderedDict
from leo.core.leoQt import QtWidgets, Orientation

CACHENAME = 'leo-layout-cache'
CACHEHOME = c.frame.top

cache = g.app.gui.find_widget_by_name(c, CACHENAME)
if not cache:
    cache = QtWidgets.QWidget(CACHEHOME)
    cache.hide()
    cache.setObjectName(CACHENAME)

ESSENTIALS = 'layout-essential-objects'
if not c.user_dict.get(ESSENTIALS):
    SPLITTERS = OrderedDict(
                    (('outlineFrame', 'secondary_splitter'),
                    ('logFrame', 'secondary_splitter'),
                    ('secondary_splitter', 'main_splitter'),
                    ('bodyFrame', 'main_splitter'))
                )
    c.user_dict[ESSENTIALS] = SPLITTERS

DEFAULT_ORIENTATIONS = 'layout-default-orientations'
if not c.user_dict.get(DEFAULT_ORIENTATIONS):
    ORIENTATIONS = {
        'main_splitter':Orientation.Horizontal,
        'secondary_splitter':Orientation.Vertical}
    c.user_dict[DEFAULT_ORIENTATIONS] = ORIENTATIONS
</t>
<t tx="tom.20240906104235.3">from collections import OrderedDict

c.doCommandByName('layout-initialize')

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

CACHENAME = 'leo-layout-cache'
ms = find_widget('main_splitter')
ss = find_widget('secondary_splitter')

initialized = True
&lt;&lt; initialize data structures &gt;&gt;

if initialized:
    &lt;&lt; rehome body editor &gt;&gt;
    &lt;&lt; clean up splitters &gt;&gt;
    &lt;&lt; set default orientations &gt;&gt;
    &lt;&lt; resize splitters &gt;&gt;
    editor.show()
</t>
<t tx="tom.20240906104235.4">CACHE = find_widget(CACHENAME)
try:
    DEFAULT_ORIENTATIONS = c.user_dict['layout-default-orientations']
    ESSENTIALS = c.user_dict['layout-essential-objects']
except KeyError as e:
    initialized = False
    g.es('Cannot restore layout: initialization is not complete:',
        'missing', e.split[1])

SPLITTER_DICT = OrderedDict()
for name in DEFAULT_ORIENTATIONS:
    splitter = find_widget(name)
    SPLITTER_DICT[name] = splitter

</t>
<t tx="tom.20240906104235.5"># In case the editor has been moved to e.g. a QTabWidget,
# Move it back to its standard place.

bsw = find_widget('bodyStackedWidget')
editor = find_widget('bodyPage2')
if bsw.indexOf(editor) == -1:
    bsw.insertWidget(0, editor)
bsw.setCurrentIndex(0)
</t>
<t tx="tom.20240906104235.6"># Remove extra (no longer wanted) widgets to the cache.
# Then insert the required widgets into their home splitters

# ESSENTIALS: {'outlineFrame':'secondary_splitter',...}
# SPLITTER_DICT: {'main_splitter':ms, ...}

# Cache widgets we don't want
desired_widget_names = list(ESSENTIALS.keys())
cache_list = []
for splitter in SPLITTER_DICT.values():
    for i in range(splitter.count()):
        widget = splitter.widget(i)
        try:
            objname = widget.objectName()
        # Probably can't happen but just in case
        except Exception:
            objname = ''
        if objname and objname not in desired_widget_names:
            cache_list.append(widget)

for widget in cache_list:
    widget.setParent(CACHE)

# Move all desired widgets into their home splitters
# ESSENTIALS is an OrderedDict so the widgets will
# be inserted in the right order.
for i, (name, target) in enumerate(ESSENTIALS.items()):
    widget = find_widget(name)
    dest = SPLITTER_DICT[target]
    dest.insertWidget(i, widget)
</t>
<t tx="tom.20240906104235.7"># SPLITTER_DICT: {'main_splitter':ms, ...}
# DEFAULT_ORIENTATIONS:
# {'main_splitter':Orientation.Horizontal...}

for splitter_name, splitter in SPLITTER_DICT.items():
    orientation = DEFAULT_ORIENTATIONS[splitter_name]
    splitter.setOrientation(orientation)
</t>
<t tx="tom.20240906104235.8"># SPLITTER_DICT is an OrderedDict so resizing will
# happen in the best order.
# SPLITTER_DICT: {'main_splitter':ss, ...}
for splt in SPLITTER_DICT.values():
     splt.setSizes([100_000] * len(splt.sizes()))
</t>
<t tx="tom.20240906104235.9">@@language python
"""Apply the "big-tree" layout.

Main splitter: tree, secondary_splitter, VR
Secondary splitter: body, log.

Orientations:
    main splitter: vertical
    secondary splitter: horizontal
"""
from leo.core.leoQt import Orientation

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)
gui = g.app.gui

c.doCommandByName('layout-restore-default')

ms = find_widget('main_splitter')
ss = find_widget('secondary_splitter')
of = find_widget('outlineFrame')
lf = find_widget('logFrame')
bf = find_widget('bodyFrame')

# Find or create VR widget
vr = find_widget('viewrendered_pane')
if not vr:
    import leo.plugins.viewrendered as v
    # Alternate versions for earlier revisions of VR
    try:
        vr = v.getVr()
    except:
        h = c.hash()
        vr.controllers[h] = vr = v.ViewRenderedController(c)
@@
# For VR3 instead
vr = find_widget('viewrendered3_pane')
if not vr:
    import leo.plugins.viewrendered3 as v
    try:
    vr = v.getVr3({'c':c})
@@c
# Clear out splitters so we can add widgets back in the right order
for widget in (ss, of, lf, bf, vr):  # Don't remove ms!
    widget.setParent(None)

# Move widgets to target splitters
of.setParent(ms)
ss.setParent(ms)
vr.setParent(ms)
bf.setParent(ss)
lf.setParent(ss)

# set Orientations
ms.setOrientation(Orientation.Vertical)
ss.setOrientation(Orientation.Horizontal)

# Re-parenting a widget to None hides it, so show it now
for widget in (ss, of, lf, bf, vr):
    widget.show()
c.doCommandByName('vr-show')

# Set splitter sizes
ms.setSizes([100_000] * len(ms.sizes()))
ss.setSizes([100_000] * len(ss.sizes()))

</t>
<t tx="tom.20240906112923.1"># ref: https://groups.google.com/g/leo-editor/c/nLfhTgnPcEc
# Modified by tbp
from leo.core.leoQt import Orientation, QtWidgets

ADDED_SPLITTER = 'layout_quad_splitter'

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

# add vr3 pane
vr3 = find_widget('viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3()

# Opening VR3 may cause it to create a pane and open in it.
# Reverse any such action, and reset layout to default.
c.doCommandByName('layout-restore-default')

added_s =  find_widget(ADDED_SPLITTER)
if not added_s:
    def make_splitter():
      w = QtWidgets.QSplitter()
      w.setObjectName(ADDED_SPLITTER)
      return w

ms = find_widget('main_splitter')
ss = find_widget('secondary_splitter')
bf = find_widget('bodyFrame')

# add vertical splitter to ms (hosting only the editor)
if not added_s:
    added_s = make_splitter()
    added_s.setOrientation(Orientation.Vertical)
ms.addWidget(added_s)
added_s.addWidget(bf)

added_s.addWidget(vr3)
added_s.setSizes([100_000] * len(added_s.sizes()))
ms.setSizes([100_000] * len(ms.sizes()))
ss.setSizes([100_000] * len(ss.sizes()))
c.doCommandByName('vr3-show')
</t>
<t tx="tom.20240921075238.1"></t>
<t tx="tom.20240921075317.1"></t>
<t tx="tom.20240921080119.1"></t>
<t tx="tom.20240921080140.1"></t>
<t tx="tom.20240921193617.1">cache = c.frame.top.layout_cache

g.es('Cache children:')
for kid in cache.children():
    g.es('    ', kid.objectName(), kid)
g.es('created_splitter_dict:')
for s, k in cache.created_splitter_dict.items():
    g.es('    ', s, k)</t>
<t tx="tom.20240921214717.1"># 0x00000179E50C20D0

QUAD = 'layout_quad_splitter'
cache = c.frame.top.layout_cache

g.es('-----')
splt = cache.find_widget(QUAD)
g.es('cache.find_widget(QUAD)', splt)

splt = g.app.gui.find_widget_by_name(c, QUAD)
g.es('g.app.gui.find_widget_by_name(QUAD)', splt)

g.es('for w in cache.children()')
for w in cache.children():
    if w.objectName() == QUAD:
        g.es('    ', w)
g.es('')</t>
<t tx="tom.20240921221303.1">from leo.core.leoQt import QtWidgets
QSplitter = QtWidgets.QSplitter

QUAD = 'layout_quad_splitter'
cache = c.frame.top.layout_cache
@c

g.es('----')
g.es('checking methods:')

g.es('    Starting cache.find_widget')
w = cache.find_widget(QUAD, True)
g.es('    cache.find_widget returned:', w)

g.es('    using cache.find_widget_in_children(QUAD):')
w = cache.find_widget_in_children(QUAD, True)
g.es('        cache.find_widget_in_children:', w)

g.es('    using for kid in cache.children():')
for kid in cache.children():
    if kid.objectName() == QUAD:
        g.es('        ', kid)

g.es('    using g.app.gui.find_widget_by_name(c, QUAD):')
w = g.app.gui.find_widget_by_name(c, QUAD)
g.es('        found', w)

g.es('    using cache.created_splitter_dict.get(QUAD):')
w = cache.created_splitter_dict.get(QUAD)
g.es('        found ', w)
</t>
<t tx="tom.20240922132354.1">cache = c.frame.top.layout_cache

g.es('-----')
VR3_NAME = 'viewrendered3_pane'
vr3 = cache.find_widget(VR3_NAME)
g.es('cache.find_widget: vr3 = ', vr3)
vr3_parent = vr3.parent()
if vr3 is not None:
    g.es('    VR3 parent:', vr3_parent.objectName())
    g.es("    Children of VR3's parent:")
    for k in vr3_parent.children():
        g.es('       ', k.objectName())

w = g.app.gui.find_widget_by_name(c, VR3_NAME)
g.es('gui.find_widget_by_name: vr3 =', w)

</t>
<t tx="tom.20240922152056.1">cache = c.frame.top.layout_cache

ms = cache.find_widget('main_splitter')
ss = cache.find_widget('secondary_splitter')

cache_kids = len(cache.children())
g.es('cache kids:', cache_kids)
g.es('Widgets in cache')
for k in cache.children():
    kind = str(type(k)).split('.')[-1]
    g.es('    ', k.objectName(), kind)

g.es('cache.find_widget("layout_quad_splitter"):')
w = cache.find_widget("layout_quad_splitter")
g.es('    ', w)

g.es('cache.find_splitter_by_name()')
w = cache.find_splitter_by_name('layout_quad_splitter')
g.es('    ', w)</t>
<t tx="tom.20240922221254.1"></t>
<t tx="tom.20240922222420.1">&lt;svg viewBox="-100 -100 200 200"
    xmlns="http://www.w3.org/2000/svg"&gt;

&lt;style&gt;
text {
    font-family:"segoe UI", corbel;
    font-size:2.0pt;
    font-weight:bold;
    text-anchor:start;
}

&lt;/style&gt;

&lt;!--rect id='frame' width='200' height='200'
    x='-100' y='-100'
    style="stroke:black; stroke-width:.4" fill='none'/--&gt;


&lt;rect id="central-image" width="56.0" height="6.0"
    x="-28.0" y="-3.0" fill="aliceblue"
    rx='2'
    style="stroke:black; stroke-width:.1"/&gt;
&lt;text x="-25.0" y="1.0"&gt;tp-x-layout-make-tabbed-body-pane&lt;/text&gt;
&lt;/svg&gt;
 </t>
<t tx="tom.20240923163215.1">cache = c.frame.top.layout_cache

for k in cache.children():
    g.es(k.objectName() or '????')
    for k1 in k.children():
        g.es('....', k1.objectName())
g.es('--------')</t>
<t tx="tom.20240930232554.1"></t>
<t tx="tom.20240930232554.10">@language python
"""Add RPCalc widget to tabbed body

Only works if the body is already tabbed.
Otherwise RPCalc will open in a new tab in the
Log frame.
"""

from leo.core.leoQt import Qt
from leo.plugins import rpcalc

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

tw = find_widget('bodyTabWidget')
if tw:
    rcalc = find_widget('rpcalc')
    if not rcalc:
        rcalc = rpcalc.CalcDlg()
        rcalc.setObjectName('rpcalc')

    if tw.indexOf(rcalc) == -1:
        index = tw.addTab(rcalc, 'RPCalc')
        tw.setCurrentIndex(index)
        # Avoid keypress on both key-up and key-down
        rcalc.standalone = True
        rcalc.setFocus(Qt.FocusReason.OtherFocusReason)
else:
    c.doCommandByName('rpcalc-toggle')
</t>
<t tx="tom.20240930232554.3">@language python
"""Move Nav frame between main and secondary splitters."""

gui = g.app.gui

ms = gui.find_widget_by_name(c, 'main_splitter')
ss = gui.find_widget_by_name(c, 'secondary_splitter')
lf = gui.find_widget_by_name(c, 'logFrame')

nav_in_secondary = ss.indexOf(lf)
target = ms if nav_in_secondary &gt; -1 else ss
target.addWidget(lf)
target.setSizes([100_000] * len(target.sizes()))

</t>
<t tx="tom.20240930232554.4">@language python
"""Toggle VR3 in main splitter without destroying the instance."""
from leo.core.leoQt import QtCore

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

def show_pane(w):
    w.setUpdatesEnabled(True)
    w.show()

c.doCommandByName('layout-initialize')
cache = find_widget('leo-layout-cache')

vr3 = find_widget('viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    # try:
        # vr3 = v3.getVr3({'c':c})
    # except:
    h = c.hash()
    vr3 = v3.controllers[h] = v3.ViewRenderedController3(c, cache)

ms = find_widget('main_splitter')
if ms.indexOf(vr3) &gt; -1:
    vr3.setParent(cache)
else:
    ms.addWidget(vr3)
    # g.app.gui.equalize_splitter(ms)
    ms.setSizes([100_000] * len(ms.sizes()))
    # Avoid flash each time VR3 pane is re-opened.
    QtCore.QTimer.singleShot(60, lambda: show_pane(vr3))
</t>
<t tx="tom.20240930232554.5">@language python
from leo.core.leoQt import QtWidgets

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

# Find splitters, etc.
ms = find_widget('main_splitter')
bp2 = find_widget('bodyPage2')
sw = find_widget('bodyStackedWidget')

# Find or make singleton bodyTabWidget
tw = find_widget('bodyTabWidget')
if not tw:
    tw = QtWidgets.QTabWidget(None)
    tw.setObjectName('bodyTabWidget')

tw.insertTab(0, bp2, 'Body Editor')
tw.setCurrentIndex(0)
tw.setMovable(True)
sw.insertWidget(0, tw)
sw.setCurrentIndex(0)
</t>
<t tx="tom.20240930232554.6">@language python
"""Add widget to tabbed body.

Only works if the body is already tabbed.
Otherwise VR3 will open in a new tab in the
Log frame.
"""

CACHENAME = 'leo-layout-cache'

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

vr3 = find_widget('viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3(c)

tw = find_widget('bodyTabWidget')
if tw and tw.parent().objectName() != CACHENAME:
        index = tw.addTab(vr3, 'VR3')
        tw.setCurrentIndex(index)
else:
    c.doCommandByName('vr3-tab')

</t>
<t tx="tom.20240930232554.7">@language python
"""Add widget to body frame tabbed widget.

Only works if the bodyStackedWidget has been changed to or
contains a QTabWidget. Otherwise VR will open in its default position.
"""

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

CACHENAME = 'leo-layout-cache'

# Find or create VR widget
vr = find_widget('viewrendered_pane')
if not vr:
    import leo.plugins.viewrendered as v
    # Alternate versions for earlier revisions of VR
    try:
        vr = v.getVr()
    except:
        h = c.hash()
        vr.controllers[h] = vr = v.ViewRenderedController(c)

tw = find_widget('bodyTabWidget')
if tw and tw.parent().objectName() != CACHENAME:
    if tw.indexOf(vr) == -1:
        index = tw.addTab(vr, 'VR')
        tw.setCurrentIndex(index)
    c.doCommandByName('vr-show')
else:
    c.doCommandByName('vr-show')
</t>
<t tx="tom.20240930232554.8">@language python
"""Toggle VR in main splitter without destroying the instance."""
from leo.core.leoQt import QtCore

def find_widget(name):
    return g.app.gui.find_widget_by_name(c, name)

def show_pane(w):
    w.setUpdatesEnabled(True)
    c.doCommandByName('vr-show')

c.doCommandByName('layout-initialize')
cache = find_widget('leo-layout-cache')

# Find or create VR widget
vr = find_widget('viewrendered_pane')
if not vr:
    import leo.plugins.viewrendered as v
    # Alternate versions for earlier revisions of VR
    try:
        vr = v.getVr()
    except:
        h = c.hash()
        vr.controllers[h] = vr = v.ViewRenderedController(c)

ms = find_widget('main_splitter')

if vr.parent() == ms:
    vr.setParent(cache)
else:
    vr.setParent(ms)
    # g.app.gui.equalize_splitter(ms)
    ms.setSizes([100_000] * len(ms.sizes()))
    # Avoid flash each time VR pane is re-opened.
    QtCore.QTimer.singleShot(60, lambda: show_pane(vr))
</t>
<t tx="tom.20240930232554.9">TABNAME = 'VR3'
CACHENAME = 'leo-layout-cache'

c.doCommandByName('layout-initialize')

log = c.frame.log

vr3 = g.app.gui.find_widget_by_name(c, 'viewrendered3_pane')
if not vr3:
    import leo.plugins.viewrendered3 as v3
    try:
        vr3 = v3.getVr3({'c':c})
    except:
        h = c.hash()
        vr3 = v3.controllers[h] = v3.ViewRenderedController3(c)

# if a VR3 tab exists, remove the vr3 widget
index = log.findTabIndex(TABNAME)
if index is not None:
    cache = g.app.gui.find_widget_by_name(c, CACHENAME)
    vr3.setParent(cache)
else:
    log.createTab(TABNAME, widget = vr3, createText = False)
    log.selectTab(TABNAME)

</t>
<t tx="tom.20240930232952.1"></t>
<t tx="tom.20240930232952.10">&amp;Big Tree Layout (With VR)
</t>
<t tx="tom.20240930232952.11">&amp;Horizontal Thirds (With VR3)</t>
<t tx="tom.20240930232952.12">&amp;Render-focused Layout (With VR)</t>
<t tx="tom.20240930232952.13"></t>
<t tx="tom.20240930232952.14">&amp;Swap Nav Frame Location
</t>
<t tx="tom.20240930232952.15">Make &amp;Body Tabbed</t>
<t tx="tom.20240930232952.16"></t>
<t tx="tom.20240930232952.17">&amp;VR3 - Open In Tabbed Body</t>
<t tx="tom.20240930232952.18">VR3 -Toggle In Split &amp;Main Panel</t>
<t tx="tom.20240930232952.19">VR3 - Toggle In &amp;Log Frame</t>
<t tx="tom.20240930232952.2">&amp;Restore Default Layout From Settings</t>
<t tx="tom.20240930232952.20"></t>
<t tx="tom.20240930232952.21">VR - &amp;Open In Tabbed Body</t>
<t tx="tom.20240930232952.22">VR -Toggle In Split &amp;Main Panel</t>
<t tx="tom.20240930232952.23"></t>
<t tx="tom.20240930232952.24">&amp;Quadrant Layout</t>
<t tx="tom.20240930232952.25"></t>
<t tx="tom.20240930232952.26">RPCalc - Open In Tabbed Body</t>
<t tx="tom.20240930232952.3">The &amp;Fallback Layout</t>
<t tx="tom.20240930232952.4">&amp;Leo's "Legacy" Layout</t>
<t tx="tom.20240930232952.5">&amp;Toggle VR3</t>
<t tx="tom.20240930232952.6">&amp;Toggle VR</t>
<t tx="tom.20240930232952.7"></t>
<t tx="tom.20240930232952.8">&amp;Vertical-thirds Layout (With VR)</t>
<t tx="tom.20240930232952.9">&amp;Vertical-thirds Layout #2 (With VR)</t>
</tnodes>
</leo_file>
